/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Signup;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.FactoryOrganization;
import Business.Organization.*;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.Role.SystemAdminRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.filechooser.FileFilter;

import userinterface.SystemAdminWorkArea.ManageOrganizationJPanel;
import userinterface.SystemAdminWorkArea.SystemAdminWorkAreaJPanel;

/**
 *
 * @author Jasmine
 */
public class SignUpJPanel extends javax.swing.JPanel {
   private JPanel userProcessContainer;
   private EcoSystem system;
   private Network selectedNetwork;
   private Enterprise selectedEnterprise;
   private Organization selectedOrganization;
 
    /**
     * Creates new form SignupJPanel
     */
    public SignUpJPanel(JPanel userProcessContainer,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateDebugComboBox();
        
       

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        networkComboBox = new javax.swing.JComboBox<>();
        enterpriseComboBox = new javax.swing.JComboBox<>();
        OrganizationComboBox = new javax.swing.JComboBox<>();
        roleComboBox = new javax.swing.JComboBox<>();
        submitButon = new javax.swing.JButton();
        btnButtion = new javax.swing.JButton();
        userNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        userNameJLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        userNameJLabel1 = new javax.swing.JLabel();
        userNameJLabel2 = new javax.swing.JLabel();
        userNameJLabel3 = new javax.swing.JLabel();
        userNameJLabel4 = new javax.swing.JLabel();
        userNameJLabel5 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        phoneNumText = new javax.swing.JTextField();
        addressText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        uploadLabel = new javax.swing.JLabel();

        networkComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        enterpriseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        OrganizationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        submitButon.setText("Submit");
        submitButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButonActionPerformed(evt);
            }
        });

        btnButtion.setText("Back");
        btnButtion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnButtionActionPerformed(evt);
            }
        });

        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("password");

        userNameJLabel.setText("UserName");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        userNameJLabel1.setText("Network");

        userNameJLabel2.setText("Enterprise");

        userNameJLabel3.setText("Organization");

        userNameJLabel4.setText("Role");

        userNameJLabel5.setText("SignUp");

        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Al Bayan", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("NAME");

        jLabel4.setFont(new java.awt.Font("Al Bayan", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("PHONE");

        phoneNumText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneNumTextActionPerformed(evt);
            }
        });

        addressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Al Bayan", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ADDRESS");

        jLabel9.setFont(new java.awt.Font("Al Bayan", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("EMAIL");

        emailText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(120, 168, 252));

        photoLabel.setBackground(new java.awt.Color(255, 255, 255));

        uploadLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-upload.png"))); // NOI18N
        uploadLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        uploadLabel.setEnabled(false);
        uploadLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uploadLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                uploadLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                uploadLabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addComponent(uploadLabel)
                .addGap(20, 20, 20))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(uploadLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(userNameJLabel))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnButtion)
                            .addComponent(userNameJLabel2)
                            .addComponent(userNameJLabel3)
                            .addComponent(userNameJLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameJLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(userNameJLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(enterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(OrganizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(58, 58, 58)
                                                .addComponent(submitButon, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(phoneNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(emailText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnButtion)
                    .addComponent(userNameJLabel5))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(networkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameJLabel)
                            .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameJLabel1))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(enterpriseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userNameJLabel2))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(OrganizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userNameJLabel3))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userNameJLabel4)))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(7, 7, 7)
                .addComponent(submitButon, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnButtionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnButtionActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnButtionActionPerformed
        
    class ImageFilter extends FileFilter {
        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            }
            String fileName = f.getName();
            int i = f.getName().lastIndexOf('.');
            return fileName.substring(i + 1).equals("jpg") || fileName.substring(i + 1).equals("png");
        }
        @Override
        public String getDescription() {
            return "please select .jpg and .png file";
        }
    }
    private void submitButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButonActionPerformed
        // TODO add your handling code here:
 
        //Employee setup    
        String name = nameText.getText();
        String phone = phoneNumText.getText();
        String address = addressText.getText();
        String email = emailText.getText();
        Employee employee = new Employee();
        employee.setName(name);
        employee.setPhoneNum(phone);
        employee.setAddress(address);
        employee.setEmail(email);
        if((ImageIcon)photoLabel.getIcon()==null){
             JOptionPane.showMessageDialog(null, "upload photo please ");
             return;
        }
        employee.setPhoto((ImageIcon)photoLabel.getIcon());
        
        system.getEmployeeDirectory().getEmployeeList().add(employee);

        Role role =(Role) roleComboBox.getSelectedItem();
        String inputUserName = userNameField.getText();
        String inputPassWord = passwordField.getText();
        String inputPassword = String.valueOf(inputPassWord);   
        UserAccount ua = system.getUserAccountDirectory().authenticateUser(inputUserName, inputPassword);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        if (ua == null) {
            submitButon.setEnabled(true);
            userNameField.setEnabled(false);
            passwordField.setEnabled(false);
            submitButon.setEnabled(false);
            userNameField.setText("");
            passwordField.setText("");
            networkComboBox.setEnabled(false);
            enterpriseComboBox.setEnabled(false);
            OrganizationComboBox.setEnabled(false);
            roleComboBox.setEnabled(false);
            inOrganization = getSystemOrganization(this.system);
            Organization org = null ;
            for(Organization o :system.getDefaultOrganizationList()){
            

            Organization.OrganizationType type = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem(); 
            if (type.equals(o.getOrganizationType())){
                org = o;   
                UserAccount u = org.getUserAccountDirectory().createUserAccount(inputUserName, inputPassword, employee, role);

                JOptionPane.showMessageDialog(null, "Account created successfully  ");
                for(UserAccount userAccount : o.getUserAccountDirectory().getUserAccountList()){
                    System.out.println("当前org下所有username " + userAccount.getUsername());
                }
            }
            
            }
        }else {
                JOptionPane.showMessageDialog(null, "Duplicate password/username, enter again ");
            }
    }//GEN-LAST:event_submitButonActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextActionPerformed

    private void phoneNumTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneNumTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneNumTextActionPerformed

    private void addressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressTextActionPerformed

    private void emailTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextActionPerformed

    private void uploadLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadLabelMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.addChoosableFileFilter(new ImageFilter());
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.showSaveDialog(null);
        if (chooser.getSelectedFile() != null) {
            File f = chooser.getSelectedFile();
            photoLabel.setIcon(new ImageIcon(f.toString()));
        }
        
    }//GEN-LAST:event_uploadLabelMouseClicked

    private void uploadLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadLabelMouseExited
        uploadLabel.setBorder(null);
    }//GEN-LAST:event_uploadLabelMouseExited

    private void uploadLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadLabelMouseEntered
        Border btnBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.WHITE);
        uploadLabel.setBorder(btnBorder);
    }//GEN-LAST:event_uploadLabelMouseEntered
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> OrganizationComboBox;
    private javax.swing.JTextField addressText;
    private javax.swing.JButton btnButtion;
    private javax.swing.JTextField emailText;
    private javax.swing.JComboBox<Object> enterpriseComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField nameText;
    private javax.swing.JComboBox<Object> networkComboBox;
    private javax.swing.JTextField passwordField;
    private javax.swing.JTextField phoneNumText;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JComboBox<Object> roleComboBox;
    private javax.swing.JButton submitButon;
    private javax.swing.JLabel uploadLabel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameJLabel;
    private javax.swing.JLabel userNameJLabel1;
    private javax.swing.JLabel userNameJLabel2;
    private javax.swing.JLabel userNameJLabel3;
    private javax.swing.JLabel userNameJLabel4;
    private javax.swing.JLabel userNameJLabel5;
    // End of variables declaration//GEN-END:variables
    
  
    
    private Organization getSystemOrganization(EcoSystem system){
             
        Organization factoryOrganization1 = null;
        Organization warehouseOrganization1 = null;
        Organization doctorOrganization1 = null;
        Organization healthOrganization1 = null;
        Organization dophOrganization1 = null;
        for (Network n : system.getNetworkList()) {
            if (n.getName().equals("Massachusetts")) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getName().equalsIgnoreCase("Merck001")) {
                        factoryOrganization1 = e.getOrganizationDirectory().createOrganization(Organization.OrganizationType.Factory);
                        factoryOrganization1.setName("Factory001");
                        warehouseOrganization1 = e.getOrganizationDirectory().createOrganization(Organization.OrganizationType.Warehouse);
                        warehouseOrganization1.setName("Warehouse001");
                    }
                    if (e.getName().equalsIgnoreCase("Walgreen001")) {
                       doctorOrganization1 = e.getOrganizationDirectory().createOrganization(Organization.OrganizationType.Doctor);
                       doctorOrganization1.setName("DoctorOrg");
                       healthOrganization1 = e.getOrganizationDirectory().createOrganization(Organization.OrganizationType.HealthDepartment);
                       healthOrganization1.setName("VcManager");
                    }
                    if (e.getName().equalsIgnoreCase("Doph001")) {
                        dophOrganization1 = e.getOrganizationDirectory().createOrganization(Organization.OrganizationType.DoPH);
                        dophOrganization1.setName("Department of Public Health in Suffolk");
                    }
                }
            } 
        }
        Organization.OrganizationType type = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem();
        Organization organization;
        if (type.getValue().equals(Organization.OrganizationType.Factory.getValue())){
            organization = new FactoryOrganization();
            return factoryOrganization1;
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.Warehouse.getValue())){
            organization = new WarehouseOrganization();
            return warehouseOrganization1;
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.DoPH.getValue())){
            organization = new DoPHOrganization();
            return dophOrganization1;
            
        }
        else if (type.getValue().equals(Organization.OrganizationType.Doctor.getValue())){
            organization = new DoctorOrganization();
            return doctorOrganization1;
           
        } else if(type.getValue().equals(Organization.OrganizationType.HealthDepartment.getValue())){
            organization = new HealthDepartmentOrganization();
            return healthOrganization1;
           
        }   
        return null;
    }
    private void populateComboBox() {
        OrganizationComboBox.removeAllItems();
        enterpriseComboBox.removeAllItems();
        networkComboBox.removeAllItems();
        roleComboBox.removeAllItems();
        system.getNetworkList().forEach((network) -> {
            System.out.println("NetWork name " + network.getName());
            networkComboBox.addItem(network);
       });


        selectedNetwork = (Network) networkComboBox.getSelectedItem();
        for (Enterprise enterprise : selectedNetwork.getEnterpriseDirectory().getEnterpriseList()) { 
               enterpriseComboBox.addItem(enterprise);
        } 
         networkComboBox.addActionListener((e) -> {
            enterpriseComboBox.removeAllItems();
            selectedNetwork = (Network) networkComboBox.getSelectedItem();
            for (Enterprise enterprise : selectedNetwork.getEnterpriseDirectory().getEnterpriseList()) {            
                enterpriseComboBox.addItem(enterprise);
            }
        });
        
        
        selectedEnterprise = (Enterprise) enterpriseComboBox.getSelectedItem();

        for (Organization.OrganizationType o : selectedEnterprise.getSupportedOrganizations()) {
            OrganizationComboBox.addItem(o);
        }        
        enterpriseComboBox.addActionListener((e) -> {
            Enterprise selectedEnterprise = (Enterprise) enterpriseComboBox.getSelectedItem();
            OrganizationComboBox.removeAllItems();
            if (selectedEnterprise == null) {
                OrganizationComboBox.addItem("");
            } 
            else {                
//                System.out.println(selectedEnterprise);
//                System.out.println(selectedEnterprise.getSupportedOrganizations().isEmpty());
                for (Organization.OrganizationType o : selectedEnterprise.getSupportedOrganizations()) {
                    OrganizationComboBox.addItem(o);
                }
            }
        });
        Organization.OrganizationType type = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem();
        Organization organization = null;
        if (type.getValue().equals(Organization.OrganizationType.Factory.getValue())){
            organization = new FactoryOrganization();
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.Warehouse.getValue())){
            organization = new WarehouseOrganization();
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.DoPH.getValue())){
            organization = new DoPHOrganization();
            
        }
        else if (type.getValue().equals(Organization.OrganizationType.Doctor.getValue())){
            organization = new DoctorOrganization();
           
        } else if(type.getValue().equals(Organization.OrganizationType.HealthDepartment.getValue())) {
            organization = new HealthDepartmentOrganization();
           
        }        

        for (Role o: organization.getSupportedRole()) {
            roleComboBox.addItem(o);
        } 
        OrganizationComboBox.addActionListener((e) -> {
        roleComboBox.removeAllItems();
        Organization finalOrganization;
        Organization.OrganizationType finalType = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem();
        if (finalType == null) {
            }else{ 
        if (finalType.getValue().equals(Organization.OrganizationType.Factory.getValue())){
            finalOrganization = new FactoryOrganization();
            System.out.println("Factory");
            for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
          
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.Warehouse.getValue())){
            finalOrganization = new WarehouseOrganization();
            System.out.println("Warehouse");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
          
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.HealthDepartment.getValue())){
            finalOrganization = new HealthDepartmentOrganization();
            System.out.println("HealthDepartment");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
            
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.Doctor.getValue())){
            finalOrganization = new DoctorOrganization();
            System.out.println("Doctor");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}    

        }
        else if (finalType.getValue().equals(Organization.OrganizationType.DoPH.getValue())){
            finalOrganization = new DoPHOrganization();
            System.out.println("DoPh");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
           
       
        //roleComboBox.removeAll();
       
        }}       
                 
        });

        
        
 //       throw new UnsupportedOperationException("Signup ComboBox issue"); //To change body of generated methods, choose Tools | Templates.
    }

    private void populateDebugComboBox() {
        OrganizationComboBox.removeAllItems();
        enterpriseComboBox.removeAllItems();
        networkComboBox.removeAllItems();
        roleComboBox.removeAllItems();
        system.getNetworkList().forEach((network) -> {
            System.out.println("NetWork name " + network.getName());
            networkComboBox.addItem(network);
       });


        selectedNetwork = (Network) networkComboBox.getSelectedItem();
        for (Enterprise enterprise : selectedNetwork.getEnterpriseDirectory().getEnterpriseList()) { 
               enterpriseComboBox.addItem(enterprise);
        } 
         networkComboBox.addActionListener((e) -> {
            enterpriseComboBox.removeAllItems();
            selectedNetwork = (Network) networkComboBox.getSelectedItem();
            for (Enterprise enterprise : selectedNetwork.getEnterpriseDirectory().getEnterpriseList()) {            
                enterpriseComboBox.addItem(enterprise);
            }
        });
         
        selectedEnterprise = (Enterprise) enterpriseComboBox.getSelectedItem();

        for (Organization.OrganizationType o : selectedEnterprise.getSupportedOrganizations()) {
            OrganizationComboBox.addItem(o);
        }   
        
        enterpriseComboBox.addActionListener((e) -> {
            Enterprise selectedEnterprise = (Enterprise) enterpriseComboBox.getSelectedItem();
            OrganizationComboBox.removeAllItems();
            if (selectedEnterprise == null) {              
            } 
            else {                
                for (Organization.OrganizationType o : selectedEnterprise.getSupportedOrganizations()) {
                    OrganizationComboBox.addItem(o);
                }
            }
        });
        Organization.OrganizationType type = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem();
        Organization organization = null;
        if (type.getValue().equals(Organization.OrganizationType.Factory.getValue())){
            organization = new FactoryOrganization();
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.Warehouse.getValue())){
            organization = new WarehouseOrganization();
          
        }
        else if (type.getValue().equals(Organization.OrganizationType.DoPH.getValue())){
            organization = new DoPHOrganization();
            
        }
        else if (type.getValue().equals(Organization.OrganizationType.Doctor.getValue())){
            organization = new DoctorOrganization();
           
        } else if(type.getValue().equals(Organization.OrganizationType.HealthDepartment.getValue())) {
            organization = new HealthDepartmentOrganization();
           
        }        

        for (Role o: organization.getSupportedRole()) {
            roleComboBox.addItem(o);
        } 
        OrganizationComboBox.addActionListener((e) -> {
        roleComboBox.removeAllItems();
        Organization finalOrganization;
        Organization.OrganizationType finalType = (Organization.OrganizationType)OrganizationComboBox.getSelectedItem();
        if (finalType == null) {
            }else{ 
        if (finalType.getValue().equals(Organization.OrganizationType.Factory.getValue())){
            finalOrganization = new FactoryOrganization();
            System.out.println("Factory");
            for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
          
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.Warehouse.getValue())){
            finalOrganization = new WarehouseOrganization();
            System.out.println("Warehouse");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
          
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.HealthDepartment.getValue())){
            finalOrganization = new HealthDepartmentOrganization();
            System.out.println("HealthDepartment");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
            
        }
        else if (finalType.getValue().equals(Organization.OrganizationType.Doctor.getValue())){
            finalOrganization = new DoctorOrganization();
            System.out.println("Doctor");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}    

        }
        else if (finalType.getValue().equals(Organization.OrganizationType.DoPH.getValue())){
            finalOrganization = new DoPHOrganization();
            System.out.println("DoPh");
             for (Role o : finalOrganization.getSupportedRole()) {
                    roleComboBox.addItem(o);
                    System.out.println(o.getClass().getName());}
           
       
        //roleComboBox.removeAll();
       
        }}       
                 
        });
    
    }
}
